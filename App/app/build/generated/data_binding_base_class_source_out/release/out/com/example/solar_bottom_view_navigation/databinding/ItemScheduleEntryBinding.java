// Generated by view binder compiler. Do not edit!
package com.example.solar_bottom_view_navigation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.solar_bottom_view_navigation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemScheduleEntryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final TextView scheduleLabel;

  @NonNull
  public final TextView scheduleState;

  @NonNull
  public final TextView scheduleTime;

  private ItemScheduleEntryBinding(@NonNull LinearLayout rootView, @NonNull Button deleteButton,
      @NonNull TextView scheduleLabel, @NonNull TextView scheduleState,
      @NonNull TextView scheduleTime) {
    this.rootView = rootView;
    this.deleteButton = deleteButton;
    this.scheduleLabel = scheduleLabel;
    this.scheduleState = scheduleState;
    this.scheduleTime = scheduleTime;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemScheduleEntryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemScheduleEntryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_schedule_entry, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemScheduleEntryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deleteButton;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.scheduleLabel;
      TextView scheduleLabel = ViewBindings.findChildViewById(rootView, id);
      if (scheduleLabel == null) {
        break missingId;
      }

      id = R.id.scheduleState;
      TextView scheduleState = ViewBindings.findChildViewById(rootView, id);
      if (scheduleState == null) {
        break missingId;
      }

      id = R.id.scheduleTime;
      TextView scheduleTime = ViewBindings.findChildViewById(rootView, id);
      if (scheduleTime == null) {
        break missingId;
      }

      return new ItemScheduleEntryBinding((LinearLayout) rootView, deleteButton, scheduleLabel,
          scheduleState, scheduleTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
